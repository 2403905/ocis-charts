{{- if empty .Values.secretRefs.ldapCaRef }}
apiVersion: v1
kind: Secret
metadata:
  name: ldap-ca
  namespace: {{ template "ocis.namespace" $ }}
  labels:
    {{- include "ocis.labels" . | nindent 4 }}
  annotations:
    "helm.sh/resource-policy": "keep"
type: Opaque
data:
    {{- $secret := (lookup "v1" "Secret" .Release.Namespace "ldap-ca") | default dict }} # TODO: use namespace template
    {{- $secretData := (get $secret "data") | default dict }}
    {{- $ldapCA := genCA "ldap-ca" 365 }} # TODO: CA lifetime? how to rotate?
    {{- $ldapCaCert := (get $secretData "ldap-ca-cert") | default (b64enc $ldapCA.Cert) }}
    {{- $ldapCaKey := (get $secretData "ldap-ca-key") | default (b64enc $ldapCA.Key) }}
    {{- $ldapCA := buildCustomCert $ldapCaCert $ldapCaKey }}
    {{- $ldapCertKey := (get $secretData "ldap-cert-key") | default (b64enc (genPrivateKey "ed25519")) }}
    {{- $tmpLdapCert := genSignedCertWithKey "idm" nil (list "idm") 365 $ldapCA (b64dec $ldapCertKey) }} # TODO: lifetime? how to rotate?
    {{- $ldapCert := (get $secretData "ldap-cert-cert") | default (b64enc $tmpLdapCert.Cert) }}
    ldap-ca-key: {{ $ldapCaKey }}
    ldap-ca-cert: {{ $ldapCaCert }}
    ldap-cert-cert: {{ $ldapCert }}
    ldap-cert-key: {{ $ldapCertKey }}
{{- end }}
